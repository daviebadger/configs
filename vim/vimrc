" *********
" Structure
" *********
"
" * Plug Manager
"
"   * Appearance
"
"     * Colorscheme
"     * Prompt
"     * Status
"
"   * Autocomplete
"   * Brackets & quotes
"   * Filesystem
"   * Git
"   * Motion
"   * Syntax
"
" * Basics
"
"   * Clipboard
"   * Lines
"
"     * Breaks
"     * Numbers
"
"   * Search
"   * Swaps
"   * Tabs
"
"     * Global
"     * Local
"
"   * Theme
"   * Whitespaces
"   * Windows
"
" * Plugins
"
"   * Airline
"   * AutoPairs
"   * EasyMotion
"   * NERDTree
"   * Promptline
"   * Syntastic
"
" * Vimdiff

" Plug Manager
" ============

call plug#begin('~/.vim/plugged')

" Appearance
" ----------

" Colorscheme
" ^^^^^^^^^^^

Plug 'roosta/vim-srcery'

" Prompt
" ^^^^^^

Plug 'edkolev/promptline.vim'

" Status
" ^^^^^^

Plug 'vim-airline/vim-airline'

" Autocomplete
" ------------

" Plug 'Valloric/YouCompleteMe'
Plug 'jiangmiao/auto-pairs'

" Brackets & quotes
" -----------------

Plug 'tpope/vim-surround'

" Filesystem
" ----------

Plug 'scrooloose/nerdtree'

" Git
" ---

Plug 'tpope/vim-fugitive'

" Motion
" ------

Plug 'easymotion/vim-easymotion'

" Syntax
" ------

Plug 'scrooloose/syntastic'

call plug#end()

" Basics
" ======

" Clipboard
" ---------

set clipboard=unnamedplus  " enable copying / pasting from / to Vim

" Lines
" -----

" Breaks
" ^^^^^^

set textwidth=79  " break lines automatically
set nowrap        " do not wrap lines if window is small

" Numbers
" ^^^^^^^

set number          " show line numbers
set colorcolumn=80  " show ruler

" Search
" ------

set hlsearch   " highlight founded results
set incsearch  " immediately jump to first found result if possible

" clear highlights after ESC

nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

" Swaps
" -----

set directory=~/.vim/swaps//  " the only place for swaps with absolute paths

" Tabs
" ----

" Global
" ^^^^^^

set expandtab  " tabs to spaces
set smarttab   " spaces like tabs

set tabstop=4      " tab size
set shiftwidth=4   " indendation size
set softtabstop=4  " keep source tab size, but visually convert to my tab size

" Local
" ^^^^^

autocmd Filetype css setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd Filetype html setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd Filetype js setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd Filetype rst setlocal tabstop=3 shiftwidth=3 softtabstop=3
autocmd Filetype yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2

" Theme
" -----

set termguicolors

colorscheme srcery

let g:srcery_underline=0

" Whitespaces
" -----------

" show whitespaces at the end of line

highlight ExtraWhitespace ctermbg=red guibg=red

match ExtraWhitespace /\s\+$/

autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Windows
" -------

set splitbelow
set splitright

" Plugins
" =======

" Airline
" -------

let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled=1

set laststatus=2  " enable Airline if there is the only window

" AutoPairs
" ---------

let g:AutoPairsShortcutToggle='<F4>'

" EasyMotion
" -----------

" trigger EasyMotion when \ pressed instead of \\

map <Leader> <Plug>(easymotion-prefix)

" NERDTree
" --------

" open NERDTree if no file specified

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" open NERDTree if directory specified

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" close Vim if last open window would be NERDTree

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Promptline
" ----------

let g:promptline_preset = {
    \'a' : [ promptline#slices#user() ],
    \'b' : [ '\w' ],
    \'c' : [ promptline#slices#vcs_branch() ],
    \'y' : [ promptline#slices#python_virtualenv() ]}

" Syntastic
" ---------

" Show error in command line if cursor is on line with the error

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Automatically open quick window with errors and close if no errors

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_loc_list_height = 5

" Check for errors if buffer is opened and for each write action except for
" quit

let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Enabling checkers

let g:syntastic_html_checkers = ['tidy']
let g:syntastic_markdown_checkers = ['mdl']
let g:syntastic_python_checkers = ['flake8', 'pylint']
let g:syntastic_rst_checkers = ['rst2pseudoxml']

" Close quick window if buffer deleted

nnoremap <silent> <C-d> :lclose<CR>:bdelete<CR>
cabbrev <silent> bd <C-r>=(getcmdtype()==#':' && getcmdpos()==1 ? 'lclose\|bdelete' : 'bd')<CR>

" Vimdiff
" =======

map ] ]c
map [ [c
